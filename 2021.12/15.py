# 1. 2579 - 계단 오르기 (https://www.acmicpc.net/problem/2579)
"""
문제 설명
계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다.
각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.
계단 오르는 데는 다음과 같은 규칙이 있다.

- 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
- 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
- 마지막 도착 계단은 반드시 밟아야 한다.

각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.
"""

# 내 풀이
n = int(input())
s = [0 for i in range(301)]
dp = [0 for i in range(301)]

for i in range(n):
    s[i] = int(input())

dp[0] = s[0]
dp[1] = s[0] + s[1]
dp[2] = max(s[1] + s[2], s[0] + s[2])

for i in range(3, n):
    dp[i] = max(dp[i - 3] + s[i - 1] + s[i], dp[i - 2] + s[i])
    
print(dp[n - 1])

"""
insight 정리
1. 다이나믹 프로그래밍의 핵심은 점화식을 찾아 테이블을 구성하는 것. 즉, 규칙을 알아내는 것이 핵심이다.
2. 이 문제가 체감상 어려웠던 이유는 특정 상황에 대한 예외처리 때문(3계단 연속 오르기 금지)
3. n을 구하기 위해 n-1만 고려하는 것은 너무 아마추어스러운 사고방식. 홀/짝수에 따라 경우가 달라질수도 있고,
이전 2 ~ 4개의 값들을 모두 고려해야 하는 경우가 있을수도 있다
4. 이 문제 해결하는데 시간이 많이 걸리긴 했지만, dp의 개념을 체화한 것 같다는 느낌이 들어서 굳
"""

# ----------------------------------------------------------------------------


# No. 문제번호 - 문제이름 (link)
"""
문제 설명
2xn 직사각형을 1x2, 2x1과 2x2 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.
"""

# 내 풀이
import sys
n = int(sys.stdin.readline())
dp = [0] * (n + 1)

def calculate(num) :
    if num == 1 :
        return 1
    if num == 2 :
        return 3
    if dp[num] == 0 :
        dp[num] = calculate(num - 2) * 2 + calculate(num - 1)
    
    return dp[num]
        
print(calculate(n) % 10007)

"""
insight 정리
1. 점화식을 구할 때, 왜 이런 식이 나오는지 원리를 꼭 고민할 것.
2. 정답에서 요구하는 접근 방법은 빠르게 찾았는데, 왜 이런 전개가 되는지 원리를 파악하지 못해 점화식을 제대로 구하지 못함
"""